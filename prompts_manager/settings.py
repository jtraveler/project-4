"""
Django settings for prompts_manager project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import re
import dj_database_url
import cloudinary

if os.path.isfile('env.py'):
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/topics/settings/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# DATABASE URL
DATABASE_URL = os.environ.get('DATABASE_URL')


ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'mj-project-4-68750ca94690.herokuapp.com',
    '.herokuapp.com'
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# ENHANCED SECURITY HEADERS FOR LIGHTHOUSE BEST PRACTICES
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# ADDITIONAL SECURITY HEADERS FOR LIGHTHOUSE COMPLIANCE
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# HSTS Headers - Enhanced for production/development
if not DEBUG:
    # Production HSTS settings (1 year minimum for Lighthouse)
    SECURE_HSTS_SECONDS = 31536000  # 1 year (minimum for Lighthouse)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Additional security headers for production
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
else:
    # Development HSTS settings (1 year but won't activate over HTTP)
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_summernote',
    'crispy_forms',
    'crispy_bootstrap5',
    'cloudinary',
    'taggit',
    'csp',  # CSP for Content Security Policy
    'prompts',
    'about',
]

SITE_ID = 1

# PERFORMANCE OPTIMIZATION: Add GZip compression as first middleware
MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',  # Add back for compression
    'django.middleware.security.SecurityMiddleware',
    'prompts.middleware.RatelimitMiddleware',  # Custom 429 handler for django-ratelimit
    'csp.middleware.CSPMiddleware',  # Add back for security (CSP)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'prompts_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': True,  # ‚Üê ADD THIS LINE (forces template reload)
        },
    },
]

WSGI_APPLICATION = 'prompts_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PERFORMANCE OPTIMIZATION: Enhanced database configuration with pooling
DATABASES = {
    'default': {
        **dj_database_url.parse(os.environ.get("DATABASE_URL")),
        # Connection pooling - keep connections alive for 60 seconds
        'CONN_MAX_AGE': 60,
    }
}

CSRF_TRUSTED_ORIGINS = [
    "https://*.codeinstitute-ide.net/",
    "https://*.herokuapp.com"
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.NumericPasswordValidator'
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Login/Logout redirect URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

ACCOUNT_EMAIL_VERIFICATION = 'none'

# Email backend (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Admin email notifications
ADMINS = [
    ('Admin Name', os.environ.get('ADMIN_EMAIL', 'admin@example.com')),
]


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# PERFORMANCE OPTIMIZATION: Enhanced Whitenoise configuration
STATICFILES_STORAGE = (
    'whitenoise.storage.CompressedManifestStaticFilesStorage'
)

# Enable static file compression and caching
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Serve static files in development
if DEBUG:
    import os
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]


# Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# CLOUDINARY HTTPS CONFIGURATION - Force HTTPS for all Cloudinary URLs
# Parse CLOUDINARY_URL to extract individual components
cloudinary_url = os.environ.get('CLOUDINARY_URL', '')
if cloudinary_url:
    # Format: cloudinary://api_key:api_secret@cloud_name
    match = re.match(r'cloudinary://(\d+):([^@]+)@(.+)', cloudinary_url)
    if match:
        CLOUDINARY_STORAGE = {
            'CLOUDINARY_URL': cloudinary_url,
            'CLOUD_NAME': match.group(3),
            'API_KEY': match.group(1),
            'API_SECRET': match.group(2),
        }
    else:
        CLOUDINARY_STORAGE = {
            'CLOUDINARY_URL': cloudinary_url,
            'CLOUD_NAME': '',
            'API_KEY': '',
            'API_SECRET': '',
        }
else:
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': '',
        'API_KEY': '',
        'API_SECRET': '',
    }

# Force Cloudinary to use HTTPS
cloudinary.config(secure=True)

# PERFORMANCE OPTIMIZATION: Enhanced session and cookie security
# Only send session cookies over HTTPS in production
SESSION_COOKIE_SECURE = not DEBUG
# Only send CSRF cookies over HTTPS in production
CSRF_COOKIE_SECURE = not DEBUG
# Prevent JavaScript access to session cookies
SESSION_COOKIE_HTTPONLY = True
# Prevent JavaScript access to CSRF cookies
CSRF_COOKIE_HTTPONLY = True

# Session optimization for better performance
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_SAVE_EVERY_REQUEST = False  # Don't save session on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# PERFORMANCE OPTIMIZATION: Caching configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
        'TIMEOUT': 300,  # 5 minutes default cache timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# SECURITY: Rate limiting configuration
UNSUBSCRIBE_RATE_LIMIT = 5  # Max requests per hour
UNSUBSCRIBE_RATE_LIMIT_TTL = 3600  # 1 hour in seconds

# SECURITY: Trusted proxy configuration for X-Forwarded-For header validation
# Heroku-specific configuration: Heroku's routing layer uses these IP ranges
# Only requests from these proxies will have X-Forwarded-For headers trusted
TRUSTED_PROXIES = [
    '10.0.0.0/8',      # Heroku internal routing
    '172.16.0.0/12',   # Heroku internal routing
]

# SECURITY: Rate limiting implementation selector
# Options: 'custom' (security-hardened custom implementation) or 'package' (django-ratelimit)
# Default: 'package' (production recommended, battle-tested)
RATE_LIMIT_BACKEND = os.environ.get('RATE_LIMIT_BACKEND', 'package')

# DJANGO-RATELIMIT: Configuration for package-based rate limiting
RATELIMIT_ENABLE = True  # Set to False to disable all rate limiting globally
RATELIMIT_USE_CACHE = 'default'  # Use default cache backend for rate limit tracking
RATELIMIT_VIEW = 'prompts.views.ratelimited'  # Custom 429 error view (optional)

# Rate limit behavior on cache failure
# True = fail open (allow requests if cache down) - matches custom implementation
# False = fail closed (block requests if cache down) - more secure but worse UX
RATELIMIT_FAIL_OPEN = True

# PERFORMANCE OPTIMIZATION: Logging configuration for monitoring
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': (
                '{levelname} {asctime} {module} {process:d} {thread:d} '
                '{message}'
            ),
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'prompts.views': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'WARNING',
            'propagate': False,
        },
    },
}

# CONTENT SECURITY POLICY CONFIGURATION
# Protects against XSS attacks by controlling resource loading

# Content Security Policy - Comprehensive Configuration
CSP_DEFAULT_SRC = ("'self'",)

CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",
    "'unsafe-eval'",
    "https://cdn.jsdelivr.net",
    "https://cdnjs.cloudflare.com",
    "https://res.cloudinary.com",
    "https://api.cloudinary.com",
    "https://widget.cloudinary.com",
)

CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",
    "https://fonts.googleapis.com",
    "https://cdn.jsdelivr.net",
    "https://cdnjs.cloudflare.com",
    "https://res.cloudinary.com",
)

CSP_IMG_SRC = (
    "'self'",
    "data:",
    "blob:",
    "https://res.cloudinary.com",
    "https://api.cloudinary.com",
)

CSP_CONNECT_SRC = (
    "'self'",
    "https://res.cloudinary.com",
    "https://api.cloudinary.com",
    "https://widget.cloudinary.com",
    "https://fonts.googleapis.com",
    "https://fonts.gstatic.com",
    "https://cdn.jsdelivr.net",
)

CSP_FONT_SRC = (
    "'self'",
    "data:",
    "https://fonts.googleapis.com",
    "https://fonts.gstatic.com",
    "https://cdn.jsdelivr.net",
    "https://cdnjs.cloudflare.com",
)

CSP_MEDIA_SRC = (
    "'self'",
    "https://res.cloudinary.com",
    "blob:",
)

CSP_FRAME_SRC = (
    "'self'",
    "https://widget.cloudinary.com",
)

# Django Summernote Configuration
SUMMERNOTE_CONFIG = {
    # Use iframe for editor (required for Summernote to work properly)
    'iframe': True,

    # Summernote options
    'summernote': {
        'width': '100%',
        'height': '400',
        'toolbar': [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'italic', 'clear']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['insert', ['link']],
            ['view', ['fullscreen', 'codeview']],
        ],
    },

    # Attachment settings
    'disable_attachment': False,
    'attachment_require_authentication': True,
    'attachment_filesize_limit': 1024 * 1024 * 10,  # 10MB
}

# ==============================================================================
# TEST DATABASE CONFIGURATION
# ==============================================================================
# Use SQLite in-memory database for tests to avoid PostgreSQL permission issues
# Production continues using PostgreSQL, tests use fast isolated SQLite
# This is a common and recommended practice for Django projects
#
# Benefits:
# - No permission issues (SQLite doesn't require CREATEDB)
# - Faster test execution (in-memory database)
# - Complete isolation (fresh database per test run)
# - Production safety (impossible to touch production data)
# ==============================================================================
import sys
if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',
        }
    }