"""
Django settings for prompts_manager project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
if os.path.isfile('env.py'):
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/topics/settings/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# DATABASE URL
DATABASE_URL = os.environ.get('DATABASE_URL')


ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'mj-project-4-68750ca94690.herokuapp.com', '.herokuapp.com']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ENHANCED SECURITY HEADERS FOR LIGHTHOUSE BEST PRACTICES
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# ADDITIONAL SECURITY HEADERS FOR LIGHTHOUSE COMPLIANCE
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# HSTS Headers - Enhanced for production/development
if not DEBUG:
    # Production HSTS settings (1 year minimum for Lighthouse)
    SECURE_HSTS_SECONDS = 31536000  # 1 year (minimum for Lighthouse)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Additional security headers for production
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
else:
    # Development HSTS settings (1 year but won't activate over HTTP)
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_summernote',
    'crispy_forms',
    'crispy_bootstrap5',
    'cloudinary',
    'taggit',
    'csp',  # CSP for Content Security Policy
    'prompts',
    'about',
]

SITE_ID = 1

# PERFORMANCE OPTIMIZATION: Add GZip compression as first middleware
MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',  # Add back for compression
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware',  # Add back for security (CSP)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'prompts_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'prompts_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PERFORMANCE OPTIMIZATION: Enhanced database configuration with connection pooling
DATABASES = {
    'default': {
        **dj_database_url.parse(os.environ.get("DATABASE_URL")),
        'CONN_MAX_AGE': 60,  # Connection pooling - keep connections alive for 60 seconds
        'OPTIONS': {
            'MAX_CONNS': 20,  # Maximum number of connections
            'MIN_CONNS': 5,   # Minimum number of connections
        } if not DEBUG else {},
    }
}

CSRF_TRUSTED_ORIGINS = [
    "https://*.codeinstitute-ide.net/",
    "https://*.herokuapp.com"
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Login/Logout redirect URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

ACCOUNT_EMAIL_VERIFICATION = 'none'

# Email backend (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# PERFORMANCE OPTIMIZATION: Enhanced Whitenoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Enable static file compression and caching
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Serve static files in development
if DEBUG:
    import os
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]


# Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# CLOUDINARY HTTPS CONFIGURATION - Force HTTPS for all Cloudinary URLs
CLOUDINARY_STORAGE = {
    'CLOUDINARY_URL': os.environ.get('CLOUDINARY_URL'),
}

# Force Cloudinary to use HTTPS
import cloudinary
cloudinary.config(secure=True)

# PERFORMANCE OPTIMIZATION: Enhanced session and cookie security
SESSION_COOKIE_SECURE = not DEBUG  # Only send session cookies over HTTPS in production
CSRF_COOKIE_SECURE = not DEBUG     # Only send CSRF cookies over HTTPS in production
SESSION_COOKIE_HTTPONLY = True     # Prevent JavaScript access to session cookies
CSRF_COOKIE_HTTPONLY = True        # Prevent JavaScript access to CSRF cookies

# Session optimization for better performance
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_SAVE_EVERY_REQUEST = False  # Don't save session on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# PERFORMANCE OPTIMIZATION: Caching configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
        'TIMEOUT': 300,  # 5 minutes default cache timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# PERFORMANCE OPTIMIZATION: Logging configuration for monitoring
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'prompts.views': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'WARNING',
            'propagate': False,
        },
    },
}

# CONTENT SECURITY POLICY CONFIGURATION
# Protects against XSS attacks by controlling resource loading

CSP_DEFAULT_SRC = ("'self'",)

CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for inline scripts in templates
    "https://cdn.jsdelivr.net",  # Bootstrap JS
    "https://cdnjs.cloudflare.com",  # Font Awesome and other CDN resources
)

CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Required for inline styles and dynamic CSS
    "https://fonts.googleapis.com",  # Google Fonts CSS
    "https://cdn.jsdelivr.net",  # Bootstrap CSS
    "https://cdnjs.cloudflare.com",  # Font Awesome CSS
)

CSP_FONT_SRC = (
    "'self'",
    "https://fonts.gstatic.com",  # Google Fonts
    "https://cdnjs.cloudflare.com",  # Font Awesome fonts
)

CSP_IMG_SRC = (
    "'self'",
    "data:",  # For inline images/icons
    "https://res.cloudinary.com",  # Cloudinary images - HTTPS only
    "https://*.cloudinary.com",  # All Cloudinary subdomains - HTTPS only
)

CSP_CONNECT_SRC = (
    "'self'",
    "https://res.cloudinary.com",  # For AJAX requests to Cloudinary
)

CSP_FRAME_SRC = ("'none'",)  # Prevent embedding in frames for security

# CSP Enforcement
CSP_REPORT_ONLY = False  # Always enforce CSP for security