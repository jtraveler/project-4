# Generated by Django 5.2.3 on 2025-10-06 21:09

from django.db import migrations


def populate_tags(apps, schema_editor):
    Tag = apps.get_model('taggit', 'Tag')
    TagCategory = apps.get_model('prompts', 'TagCategory')

    # NOTE: We don't delete existing tags to preserve existing prompt-tag relationships
    # Instead, we use get_or_create to add only new tags

    # Create all 209 tags organized by category
    tags_by_category = {
        'people-portraits': [
            'Portraits', 'Men', 'Women', 'Children', 'Families', 'Couples',
            'Groups', 'Close-ups', 'Profiles', 'Silhouettes', 'Body Parts',
            'Hands', 'Eyes', 'Fashion Models', 'Senior Citizens'
        ],
        'nature-landscapes': [
            'Mountains', 'Forests', 'Beaches', 'Deserts', 'Oceans', 'Lakes',
            'Rivers', 'Waterfalls', 'Caves', 'Cliffs', 'Valleys', 'Meadows',
            'Jungles', 'Islands', 'Horizons', 'Seascapes', 'Wilderness', 'Rolling Hills'
        ],
        'architecture-structures': [
            'Modern Architecture', 'Historic Buildings', 'Skyscrapers', 'Bridges',
            'Castles', 'Ruins', 'Urban Landscapes', 'Abandoned Buildings',
            'Minimalist Architecture', 'Gothic Architecture', 'Brutalist Architecture', 'Cathedrals'
        ],
        'interiors-design': [
            'Interior Design', 'Living Rooms', 'Bedrooms', 'Kitchens', 'Offices',
            'Cafes', 'Restaurants', 'Hotels', 'Minimalist Interiors', 'Industrial Design'
        ],
        'fashion-beauty': [
            'Fashion Photography', 'Street Fashion', 'Editorial Fashion', 'Makeup',
            'Hair Styling', 'Jewelry', 'Accessories', 'Beauty Portraits', 'Magazine Covers'
        ],
        'animals-wildlife': [
            'Wild Animals', 'Domestic Animals', 'Birds', 'Marine Life', 'Insects',
            'Reptiles', 'Cats', 'Dogs', 'Horses', 'Exotic Animals',
            'Animal Close-ups', 'Animal Behavior'
        ],
        'action-movement': [
            'Sports', 'Dancing', 'Running', 'Jumping', 'Flying', 'Extreme Sports',
            'Water Sports', 'Winter Sports', 'Action Shots', 'Dynamic Movement'
        ],
        'art-design': [
            'Poster Design', 'Graphic Design', 'Typography', 'Illustrations',
            'Digital Art', '3D Renders', 'Logos', 'Patterns', 'Textures',
            'Collages', 'Mixed Media', 'Album Covers'
        ],
        'scifi-fantasy': [
            'Science Fiction', 'Space', 'Aliens', 'Robots', 'Cyberpunk',
            'Futuristic Cities', 'Fantasy Worlds', 'Dragons', 'Magic',
            'Spaceships', 'Dystopian', 'Post-Apocalyptic'
        ],
        'mythology-legends': [
            'Greek Mythology', 'Norse Mythology', 'Egyptian Mythology',
            'Mythical Creatures', 'Gods and Goddesses', 'Ancient Civilizations',
            'Folklore', 'Legendary Heroes'
        ],
        'concept-art': [
            'Character Design', 'Environment Design', 'Vehicle Design',
            'Creature Design', 'Prop Design', 'Storyboards',
            'Visual Development', 'Game Art'
        ],
        'abstract-artistic': [
            'Abstract Art', 'Surrealism', 'Geometric Patterns', 'Color Studies',
            'Fractal Art', 'Psychedelic', 'Optical Illusions', 'Experimental',
            'Avant-Garde', 'Minimalism'
        ],
        'emotions-expressions': [
            'Joy', 'Sadness', 'Anger', 'Fear', 'Surprise', 'Contemplation',
            'Serenity', 'Tension', 'Love', 'Melancholy'
        ],
        'lighting-atmosphere': [
            'Golden Hour', 'Blue Hour', 'Dramatic Lighting', 'Soft Lighting',
            'Neon Lights', 'Candlelight', 'Backlit', 'Shadows',
            'High Contrast', 'Low Key', 'Atmospheric', 'Moody'
        ],
        'seasons-events': [
            'Spring', 'Summer', 'Autumn', 'Winter', 'Celebrations',
            'Festivals', 'Ceremonies', 'Weddings'
        ],
        'holidays': [
            'Christmas', 'Halloween', 'Thanksgiving', 'New Year',
            "Valentine's Day", 'Easter'
        ],
        'texture-detail': [
            'Close-up Details', 'Macro Photography', 'Textures', 'Surfaces',
            'Materials', 'Patterns', 'Weathered', 'Organic Textures'
        ],
        'magic-wonder': [
            'Magical Realism', 'Enchanted', 'Whimsical', 'Dreamlike',
            'Ethereal', 'Mystical'
        ],
        'luxury-elegance': [
            'Luxury Lifestyle', 'Elegance', 'Opulence', 'High Fashion',
            'Fine Dining', 'Premium Products'
        ],
        'humor-playful': [
            'Humorous', 'Playful', 'Quirky', 'Satirical', 'Cartoon Style'
        ],
        'culture-history': [
            'Black History', 'Civil Rights', 'Indigenous Cultures', 'Asian Cultures',
            'Latin American Cultures', 'Middle Eastern Cultures', 'African Cultures',
            'European History', 'Cultural Heritage', 'Traditional Costumes',
            'Cultural Celebrations', 'Historical Events'
        ],
    }

    # Create tags and their category associations
    for category, tag_names in tags_by_category.items():
        for tag_name in tag_names:
            # Create slug from tag name (lowercase with hyphens)
            slug = tag_name.lower().replace(' ', '-').replace("'", '')

            # Get or create tag (won't error if tag already exists)
            tag, created = Tag.objects.get_or_create(name=tag_name, defaults={'slug': slug})

            # Create category association if it doesn't exist
            TagCategory.objects.get_or_create(tag=tag, defaults={'category': category})


def reverse_populate_tags(apps, schema_editor):
    Tag = apps.get_model('taggit', 'Tag')
    Tag.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('prompts', '0022_tagcategory'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.RunPython(populate_tags, reverse_populate_tags),
    ]
